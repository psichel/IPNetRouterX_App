//  RouteTable.m//  IPNetSentryX////  Created by Peter Sichel on Thu Jun 10 2004.//  Copyright (c) 2004 Sustainable Softworks, Inc. All rights reserved.////	Delegate and data source for route table#import "RouteTable.h"#import "SentryDocument.h"#import "SentryState.h"#import "kftSupport.h"#import "SystemConfiguration.h"@implementation RouteTable// ---------------------------------------------------------------------------------//	¥ init// ---------------------------------------------------------------------------------- (id)init{	if (self = [super init]) {        // initialize our instance variables		routeArray = [[NSMutableArray alloc] init];		delegate = nil;    }    return self;}// ---------------------------------------------------------------------------------//	¥ dealloc// ---------------------------------------------------------------------------------- (void) dealloc {    [routeArray release];	routeArray = nil;	[self setDelegate:nil];    [super dealloc];}// ---------------------------------------------------------------------------------//	¥ removeAllObjects// ---------------------------------------------------------------------------------- (void)removeAllObjects {    [routeArray removeAllObjects];}// ---------------------------------------------------------------------------------// ¥ delegate// ---------------------------------------------------------------------------------- (id)delegate { return delegate; }- (void)setDelegate:(id)value {	//[value retain];	//[delegate release];	delegate = value;}// ---------------------------------------------------------------------------------//	¥ routeArray// ---------------------------------------------------------------------------------// Get or set underlying NSMutableArray object to examine or update route list- (NSMutableArray *)routeArray { return routeArray; }- (void)setRouteArray:(NSMutableArray *)value {	[value retain];	[routeArray release];	routeArray = value;}// ---------------------------------------------------------------------------------//	¥ arrayOfDictionaries// ---------------------------------------------------------------------------------// Return as array of dictionaries for export as XML- (NSArray *)arrayOfDictionaries {	NSEnumerator* en;	NSMutableArray* arrayOfDictionaries;	RouteEntry* entry;		arrayOfDictionaries = [NSMutableArray array];	en = [routeArray objectEnumerator];	while (entry = [en nextObject]) {		[arrayOfDictionaries addObject:[entry nodeDictionary]];	}	return (NSArray *)arrayOfDictionaries;}// ---------------------------------------------------------------------------------//	¥ loadArrayOfDictionaries// ---------------------------------------------------------------------------------- (BOOL)loadArrayOfDictionaries:(NSArray *)inArray{	int returnValue = YES;	NSEnumerator* en;	NSDictionary* nodeDictionary;	RouteEntry* entry;		en = [inArray objectEnumerator];	while (nodeDictionary = [en nextObject]) {		entry = [RouteEntry entryFromDictionary:nodeDictionary];		if (entry) [self addObject:entry];	}	return returnValue;}#pragma mark -- Access Helpers --// ---------------------------------------------------------------------------------//	¥ addObject:// ---------------------------------------------------------------------------------// add an object to the end of the Table data array// return its index;- (int)addObject:(id)entry {    int count;    count = [routeArray count];    [routeArray addObject:entry];    return count;}// ---------------------------------------------------------------------------------//	¥ removeObjectAtIndex:// ---------------------------------------------------------------------------------- (BOOL)removeObjectAtIndex:(int)index{    int count;    BOOL result = NO;    count = [routeArray count];    if (index < count) {        [routeArray removeObjectAtIndex:index];        result = YES;    }    return result;}// ---------------------------------------------------------------------------------//	¥ replaceObjectAtIndex:// ---------------------------------------------------------------------------------// replace object for specified index// return NO if index is beyond end of array+1- (BOOL)replaceObjectAtIndex:(int)index withObject:(id)object {    int count;    BOOL result = NO;    count = [routeArray count];    if (index < count) {        [routeArray replaceObjectAtIndex:index withObject:object];        result = YES;    }    else if (index == count) {        [self addObject:object];        result = YES;    }    return result;}// ---------------------------------------------------------------------------------//	¥ objectAtIndex:// ---------------------------------------------------------------------------------// get object value from Table data array for specified index.// Return false if index is beyond end of array.- (id)objectAtIndex:(unsigned)index {    id result;    int count;    count = [routeArray count];    if (index < count) {        result = [routeArray objectAtIndex:index];    } else {        result = nil;    }    return result;}// ---------------------------------------------------------------------------------//	¥ count// ---------------------------------------------------------------------------------- (unsigned)count{    return [routeArray count];}// ---------------------------------------------------------------------------------//	¥ matchingRouteEntry:// ---------------------------------------------------------------------------------// Find matching route entry if any- (RouteEntry *)matchingRouteEntry:(RouteEntry *)inEntry{	RouteEntry* returnValue = nil;	NSEnumerator* en;	RouteEntry* entry;	en = [routeArray objectEnumerator];	while (entry = [en nextObject]) {		if ([[inEntry destination] isEqualTo:[entry destination]]) {			returnValue = entry;			break;		}	}	return returnValue;}#pragma mark --- NSTableViewDelegate ---//- (void)tableView:(NSTableView *)tableView willDisplayCell:(id)cell forTableColumn:(NSTableColumn *)tableColumn row:(int)row;//- (BOOL)tableView:(NSTableView *)tableView shouldEditTableColumn:(NSTableColumn *)tableColumn row:(int)row;//- (BOOL)selectionShouldChangeInTableView:(NSTableView *)aTableView;//- (BOOL)tableView:(NSTableView *)tableView shouldSelectRow:(int)row;//- (BOOL)tableView:(NSTableView *)tableView shouldSelectTableColumn:(NSTableColumn *)tableColumn;#pragma mark --- NSTableDataSource ---- (int)numberOfRowsInTableView:(NSTableView *)tableView{	int returnValue = [routeArray count];	return returnValue;}- (id)tableView:(NSTableView *)tableView objectValueForTableColumn:(NSTableColumn *)tableColumn row:(int)row{	RouteEntry* entry;	entry = [routeArray objectAtIndex:row];	return [entry valueForKey:[tableColumn identifier]];}// optional- (void)tableView:(NSTableView *)tableView setObjectValue:(id)object forTableColumn:(NSTableColumn *)tableColumn row:(int)row{	RouteEntry* entry;	NSString* columnID;	id oldValue;		entry = [routeArray objectAtIndex:row];	columnID = [tableColumn identifier];	oldValue = [entry valueForKey:columnID];	[[oldValue retain] autorelease];	[entry takeValue:object forKey:columnID];	// note if value has changed	if (oldValue) {		if ([(NSString *)object compare:oldValue] != NSOrderedSame)			[delegate updateParameter:@"RouteEntry" withObject:entry];	}	else if (object) {		[delegate updateParameter:@"RouteEntry" withObject:entry];	}}@end