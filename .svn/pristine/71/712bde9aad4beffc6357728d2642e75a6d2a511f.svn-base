//  PSDictionaryTable.m//  IPNetStableX////  Created by Peter Sichel on Mon Nov 10 2003.//  Copyright (c) 2003 Sustainable Softworks, Inc. All rights reserved.////	Delegate and data source for DHCP State tables#import "PSDictionaryTable.h"#import "PSStateEntry.h"#import "PSServer.h"	// updateParameter:withObject:#import "IPSupport.h"@implementation PSDictionaryTable// ---------------------------------------------------------------------------------//	¥ init// ---------------------------------------------------------------------------------- (id)init{	if (self = [super init]) {        // initialize our instance variables        tableDictionary = [[NSMutableDictionary alloc] init];		sortedKeys = nil;		delegate = nil;    }    return self;}// ---------------------------------------------------------------------------------//	¥ dealloc// ---------------------------------------------------------------------------------- (void) dealloc {	[tableDictionary release];  tableDictionary = nil;	[sortedKeys release];		sortedKeys = nil;	[self setDelegate:nil];    [super dealloc];}// ---------------------------------------------------------------------------------//	¥ delegate// ---------------------------------------------------------------------------------- (id)delegate { return delegate; }- (void)setDelegate:(id)value {	//[value retain];	//[delegate release];	delegate = value;}// ---------------------------------------------------------------------------------//	¥ updateTable// ---------------------------------------------------------------------------------// notify any listeners when table data has been modified- (void)updateTable:(NSString *)tableName{	[delegate updateParameter:tableName withObject:self];}// ---------------------------------------------------------------------------------//	¥ tableFromDictionary// ---------------------------------------------------------------------------------// override to replace "PSDictionaryTable" with subclass"//+ (PSDictionaryTable *)tableFromDictionary:(NSDictionary *)inDictionary {//	PSDictionaryTable* table;//	table = [[[PSDictionaryTable alloc] init] autorelease];//	[table setTableDictionary:[NSMutableDictionary dictionaryWithDictionary:inDictionary]];//	return table;//}// ---------------------------------------------------------------------------------//	¥ tableDictionary// ---------------------------------------------------------------------------------// Get or set underlying NSMutableDictionary object to examine or update interface list- (NSMutableDictionary *)tableDictionary { return tableDictionary; }- (void)setTableDictionary:(NSMutableDictionary *)value {	[value retain];	[tableDictionary release];	tableDictionary = value;	// force indexes to update	[sortedKeys release];   sortedKeys = nil;}// ---------------------------------------------------------------------------------//	¥ tableDictionaryOfDictionaries// ---------------------------------------------------------------------------------// Return as dictionary of dictionaries for export as XML- (NSDictionary *)dictionaryOfDictionaries {	NSEnumerator* en;	NSMutableDictionary* dictionaryOfDictionaries;	PSStateEntry* entry;		dictionaryOfDictionaries = [NSMutableDictionary dictionary];	en = [tableDictionary objectEnumerator];	while (entry = [en nextObject]) {		[dictionaryOfDictionaries setObject:[entry nodeDictionary] forKey:[entry key]];	}	return (NSDictionary *)dictionaryOfDictionaries;}// ---------------------------------------------------------------------------------//	¥ loadDictionaryOfDictionaries:forEntryClass:// ---------------------------------------------------------------------------------// load table from dictionary of node Dictionaries creating table entries of class- (BOOL)loadDictionaryOfDictionaries:(NSDictionary *)inDictionary forEntryClass:(Class)class{	int returnValue = NO;	NSEnumerator* en;	NSDictionary* nodeDictionary;	id entry;		[self removeAllObjects];	if (inDictionary) {		en = [inDictionary objectEnumerator];		while (nodeDictionary = [en nextObject]) {			entry = [class entryFromDictionary:nodeDictionary];			if (entry) [self setObject:entry forKey:[entry key]];		}		returnValue = YES;	}	return returnValue;}// ---------------------------------------------------------------------------------//	¥ count// ---------------------------------------------------------------------------------- (unsigned)count{	return [tableDictionary count];}// ---------------------------------------------------------------------------------//	¥ description// ---------------------------------------------------------------------------------- (NSString *)description{	NSArray* keys;	NSEnumerator* en;	NSString* key;	NSMutableString* returnValue;	returnValue = [[[NSMutableString alloc] init] autorelease];	[returnValue setString:@"Table = "];	keys = [tableDictionary allKeys];	en = [keys objectEnumerator];	while (key = [en nextObject]) {		[returnValue appendFormat:@"%@;",[[tableDictionary objectForKey:key] description]];	}	return returnValue;}#pragma mark --- dictionary access ---- (id)valueForKey:(id)key		// support key-value coding{	return [tableDictionary objectForKey:key];}- (id)objectForKey:(id)key{	return [tableDictionary objectForKey:key];}- (void)setObject:(id)anObject forKey:(id)key{	BOOL updateIndex = YES;	if ([tableDictionary objectForKey:key]) updateIndex = NO;	[tableDictionary setObject:anObject forKey:key];	// force indexes to update	if (updateIndex) {		[sortedKeys release];   sortedKeys = nil;	}}- (void)removeObjectForKey:(id)key{	[tableDictionary removeObjectForKey:key];	// force indexes to update	[sortedKeys release];   sortedKeys = nil;}// ---------------------------------------------------------------------------------//	¥ addObject// ---------------------------------------------------------------------------------- (void)addObject:(id)anObject{	id key = [anObject key];	if (key) {		[tableDictionary setObject:anObject forKey:key];		// force indexes to update		[sortedKeys release];   sortedKeys = nil;		// do not reload data so caller can batch updates	}}// ---------------------------------------------------------------------------------//	¥ removeObject// ---------------------------------------------------------------------------------- (void)removeObject:(id)anObject{	[tableDictionary removeObjectForKey:[anObject key]];	// force indexes to update	[sortedKeys release];   sortedKeys = nil;	// do not reload data so caller can batch updates}// ---------------------------------------------------------------------------------//	¥ removeAllObjects// ---------------------------------------------------------------------------------- (void)removeAllObjects{	[tableDictionary removeAllObjects];	// force indexes to update	[sortedKeys release];   sortedKeys = nil;}// ---------------------------------------------------------------------------------//	¥ objectAtIndex// ---------------------------------------------------------------------------------- (id)objectAtIndex:(unsigned)index{/*	NSString* key;	if (!sortedKeys) {		sortedKeys = [[tableDictionary allKeys] sortedArrayUsingFunction:ipSort context:NULL];		[sortedKeys retain];	}	key = [sortedKeys objectAtIndex:index];	return [tableDictionary objectForKey:key];*/	NSLog(@"PSDictionaryTable: override for subclass");	return nil;}#pragma mark --- NSTableViewDelegate ---//- (void)tableView:(NSTableView *)tableView willDisplayCell:(id)cell forTableColumn:(NSTableColumn *)tableColumn row:(int)row;//- (BOOL)tableView:(NSTableView *)tableView shouldEditTableColumn:(NSTableColumn *)tableColumn row:(int)row;//- (BOOL)selectionShouldChangeInTableView:(NSTableView *)aTableView;//- (BOOL)tableView:(NSTableView *)tableView shouldSelectRow:(int)row;//- (BOOL)tableView:(NSTableView *)tableView shouldSelectTableColumn:(NSTableColumn *)tableColumn;#pragma mark --- NSTableDataSource ---// ---------------------------------------------------------------------------------//	¥ numberOfRowsInTableView// ---------------------------------------------------------------------------------- (int)numberOfRowsInTableView:(NSTableView *)tableView{	return [tableDictionary count];}// ---------------------------------------------------------------------------------//	¥ tableView:objectValueForTableColumn:row:// ---------------------------------------------------------------------------------- (id)tableView:(NSTableView *)tableView objectValueForTableColumn:(NSTableColumn *)tableColumn row:(int)row{	id returnValue;	id entry;	entry = [self objectAtIndex:row];	returnValue = [entry valueForKey:[tableColumn identifier]];	return returnValue;}#pragma mark --- CODING_AND_COPYING ---// <NSCoding>- (void)encodeWithCoder:(NSCoder *)coder{    [coder encodeObject:tableDictionary];    return;}- (id)initWithCoder:(NSCoder *)coder{    self = [super init];	tableDictionary = [[coder decodeObject] retain];    return self;}// tell the PortCoder not to use a proxy- (id)replacementObjectForPortCoder:(NSPortCoder *)encoder {    return self;}// <NSCopying>- (id)copyWithZone:(NSZone *)zone {    PSDictionaryTable *copy;	copy = [[[self class] allocWithZone:zone] init];    [copy setTableDictionary:tableDictionary];    return copy;}@end