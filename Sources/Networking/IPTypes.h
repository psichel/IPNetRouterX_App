// =================================================================================//	IPTypes.h	 		©1997-2001 Sustainable Softworks. All rights reserved.// =================================================================================#ifndef _H_IPTypes#define _H_IPTypes#pragma once#include <sys/types.h>// ---------------------------------------------------------------------------//		¥ IP packet structures// ---------------------------------------------------------------------------struct ip_header_t	{	u_int8_t	hlen;	u_int8_t	tos;	u_int16_t	totalLength;	u_int16_t	identification;	u_int16_t	fragmentOffset;	u_int8_t	ttl;	u_int8_t	protocol;	u_int16_t	checksum;	u_int32_t	srcAddress;	u_int32_t	dstAddress;	};typedef struct ip_header_t ip_header_t;#define	IP_RF 0x8000			/* reserved fragment flag */#define	IP_DF 0x4000			/* dont fragment flag */#define	IP_MF 0x2000			/* more fragments flag */#define	IP_OFFMASK 0x1fff		/* mask for fragmenting bits */struct icmp_header_t	{	u_int8_t	type;	u_int8_t	code;	u_int16_t	checksum;	u_int16_t	identifier;			// icmp echo	u_int16_t	seqNumber;			// icmp echo	u_int8_t	data[28];			// optional data		// IP header + first 64 bits of datagram	};typedef struct icmp_header_t icmp_header_t;#define kIcmpEchoReply 					0#define kIcmpTypeDestUnreachable		3#define kIcmpTypeSourceQuench			4#define kIcmpTypeRedirect				5#define kIcmpTypeEchoRequest			8#define kIcmpTypeTimeExceeded 			11#define kIcmpTypeParameterProblem		12#define rSTRN_IcmpCode					133#define kIcmpCodeNetworkUnreachable		0#define kIcmpCodeHostUnreachable		1#define kIcmpCodeProtocolUnreachable	2#define kIcmpCodePortUnreachable		3#define kIcmpCodeDestNetworkUnknown		6#define kIcmpCodeDestHostUnknown		7#define kIcmpCodeDestNetworkAdmin		9#define kIcmpCodeDestHostAdmin			10#define kIcmpCodeCommAdminFilter		13#define kIcmpCodeNone					64	// not a valid type code// UDP headerstruct udp_pseudo_t	{	u_int32_t	srcAddress;	u_int32_t	dstAddress;	u_int8_t	zero;	u_int8_t	protocol;	u_int16_t	length;	};typedef struct udp_pseudo_t udp_pseudo_t;struct udp_header_t	{	u_int16_t	srcPort;	u_int16_t	dstPort;	u_int16_t	messageLength;	u_int16_t	checksum;	u_int8_t	data[36];			// optional data	};typedef struct udp_header_t udp_header_t;// TCP headerstruct tcp_pseudo_t	{	u_int32_t	srcAddress;	u_int32_t	dstAddress;	u_int8_t	zero;	u_int8_t	protocol;	u_int16_t	length;	};typedef struct tcp_pseudo_t tcp_pseudo_t;struct tcp_header_t	{	u_int16_t	srcPort;	u_int16_t	dstPort;	u_int32_t	seqNumber;	u_int32_t	ackNumber;	u_int8_t	hlen;			// hlen[4], reserved[6], code bits[6]	u_int8_t	code;	u_int16_t	windowSize;	u_int16_t	checksum;	u_int16_t	urgentPointer;	u_int8_t	options[4];		// TCP options	};typedef struct tcp_header_t tcp_header_t;#define kCodeFIN		0x01#define kCodeSYN		0x02#define kCodeRST		0x04#define kCodePSH		0x08#define kCodeACK		0x10#define kCodeURG		0x20#define kTCPOptionEnd	0#define kTCPOptionNop	1#define kTCPOptionMSS	2#define kTCPOptionScale 3#define kTCPOptionTimeStamp 8#endif