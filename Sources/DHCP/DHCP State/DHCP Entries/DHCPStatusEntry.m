////  DHCPStatusEntry.m//  IPNetRouterX////  Created by Peter Sichel on Thu May 01 2003.//  Copyright (c) 2003-04 Sustainable Softworks, Inc. All rights reserved.//#import "DHCPStatusEntry.h"#import "DHCPLeaseState.h"#import "IPSupport.h"@implementation DHCPStatusEntry// ---------------------------------------------------------------------------------//	¥ init// ---------------------------------------------------------------------------------- (id)init{    if (self = [super init]) {        // initialize our instance variables		ipAddressInt = 0;		clientID = nil;		hardwareAddress = nil;		lastUpdateStr = nil;		expireTimeStr = nil;		bzero(&ha16.octet[0], 16);    }    return self;}// ---------------------------------------------------------------------------------//	¥ dealloc// ---------------------------------------------------------------------------------- (void) dealloc {	clientID = nil;			// object retained by nodeDictionary	hardwareAddress = nil;  // object retained by nodeDictionary    [self setLastUpdateStr:nil];	[self setExpireTimeStr:nil];	[super dealloc];}- (void)setNodeDictionary:(NSMutableDictionary *)value {    [value retain];    [nodeDictionary release];    nodeDictionary = value;	ipAddressInt = ipForString([nodeDictionary objectForKey:DS_ipAddress]);}- (id)initWithCoder:(NSCoder *)coder{    self = [super init];	nodeDictionary = [[coder decodeObject] retain];	ipAddressInt = ipForString([nodeDictionary objectForKey:DS_ipAddress]);    return self;}// ---------------------------------------------------------------------------------//	¥ entryFromDictionary// ---------------------------------------------------------------------------------+ (DHCPStatusEntry *)entryFromDictionary:(NSDictionary *)entryDictionary {	DHCPStatusEntry* entry;	entry = [[[DHCPStatusEntry alloc] init] autorelease];	[entry setNodeDictionary:[NSMutableDictionary dictionaryWithDictionary:entryDictionary]];	return entry;}// ---------------------------------------------------------------------------------//	¥ description// ---------------------------------------------------------------------------------- (NSString *)description {	DHCPLeaseState* leaseState = [[[DHCPLeaseState alloc] init] autorelease];	[leaseState setDHCPLeaseState:[[self leaseState] intValue]];	return [NSString stringWithFormat:@"%@ \t %@ \t %@ \t %@ \t %@ \t %@",		[self ipAddress],		[leaseState stringValue],		[[self lastUpdate] description],		[[self expireTime] description],		[self hardwareAddress],		[self clientID]	];}#pragma mark -- sort by key --// ---------------------------------------------------------------------------------//	¥ key// ---------------------------------------------------------------------------------- (id)key { return [nodeDictionary objectForKey:DS_ipAddress]; }- (u_int32_t)keyInt {	return ipAddressInt;}// ---------------------------------------------------------------------------------//	¥ compareKey// ---------------------------------------------------------------------------------- (NSComparisonResult)compareKey:(id)key{	u_int32_t ta = ipForString([self key]);	u_int32_t tb = ipForString(key);		if (ta > tb) return NSOrderedDescending;	else if (ta < tb) return NSOrderedAscending;	return NSOrderedSame;}// ---------------------------------------------------------------------------------//	¥ compareKeyInt// ---------------------------------------------------------------------------------- (NSComparisonResult)compareKeyInt:(u_int32_t)key{	//u_int32_t ta = ipAddressInt	//u_int32_t tb = key;		if (ipAddressInt > key) return NSOrderedDescending;	else if (ipAddressInt < key) return NSOrderedAscending;	return NSOrderedSame;}#pragma mark --- Accessors ---- (u_int32_t)ipAddressInt { return ipAddressInt; }- (void)setIpAddressInt:(u_int32_t)value{	ipAddressInt = value;	if (value) [nodeDictionary setObject:stringForIP(value) forKey:DS_ipAddress];	else [nodeDictionary removeObjectForKey:DS_ipAddress];}- (NSString *)ipAddress { return [nodeDictionary objectForKey:DS_ipAddress]; }- (void)setIpAddress:(NSString *)value {    if (value) [nodeDictionary setObject:value forKey:DS_ipAddress];    else [nodeDictionary removeObjectForKey:DS_ipAddress];	ipAddressInt = ipForString(value);}- (NSNumber *)leaseState { return [nodeDictionary objectForKey:DS_leaseState]; }- (void)setLeaseState:(NSNumber *)value {    if (value) [nodeDictionary setObject:value forKey:DS_leaseState];    else [nodeDictionary removeObjectForKey:DS_leaseState];}- (NSDate *)lastUpdate { return [nodeDictionary objectForKey:DS_lastUpdate]; }- (void)setLastUpdate:(NSDate *)value {	if (value) [nodeDictionary setObject:value forKey:DS_lastUpdate];    else [nodeDictionary removeObjectForKey:DS_lastUpdate];	// clear cached string value	[self setLastUpdateStr:nil];}// ---------------------------------------------------------------------------------//	¥ lastUpdateStr// ---------------------------------------------------------------------------------- (NSString *)lastUpdateStr {   // cache NSDate in desired NSString format	NSString* returnValue = lastUpdateStr;	if (!returnValue) {		NSDate* value = [nodeDictionary objectForKey:DS_lastUpdate];		returnValue = [value descriptionWithCalendarFormat:@"%Y-%m-%d %H:%M:%S" timeZone:nil locale:nil];		[self setLastUpdateStr:returnValue];	}	return returnValue;}- (void)setLastUpdateStr:(NSString *)value {	[value retain];	[lastUpdateStr release];	lastUpdateStr = value;}- (NSDate *)expireTime { return [nodeDictionary objectForKey:DS_expireTime]; }- (void)setExpireTime:(NSDate *)value {    if (value) [nodeDictionary setObject:value forKey:DS_expireTime];    else [nodeDictionary removeObjectForKey:DS_expireTime];	// clear cached string value	[self setExpireTimeStr:nil];}// ---------------------------------------------------------------------------------//	¥ expireTimeStr// ---------------------------------------------------------------------------------- (NSString *)expireTimeStr {   // cache NSDate in desired NSString format	NSString* returnValue = expireTimeStr;	if (!returnValue) {		NSDate* value = [nodeDictionary objectForKey:DS_expireTime];		returnValue = [value descriptionWithCalendarFormat:@"%Y-%m-%d %H:%M:%S" timeZone:nil locale:nil];		[self setExpireTimeStr:returnValue];	}	return returnValue;}- (void)setExpireTimeStr:(NSString *)value {	[value retain];	[expireTimeStr release];	expireTimeStr = value;}// ---------------------------------------------------------------------------------//	¥ hardwareAddress// ---------------------------------------------------------------------------------- (NSString *)hardwareAddress {	NSString* returnValue = hardwareAddress;	if (!returnValue) {		returnValue =[nodeDictionary objectForKey:DS_hardwareAddress];		hardwareAddress = returnValue;	}	return returnValue;}- (void)setHardwareAddress:(NSString *)value {    if (value) [nodeDictionary setObject:value forKey:DS_hardwareAddress];    else [nodeDictionary removeObjectForKey:DS_hardwareAddress];	// clear cached values	hardwareAddress = nil;	bzero(&ha16.octet[0], 16);	hlen = 0;}- (HardwareAddress16_t *)ha16 {	if (hlen == 0) {		NSString* str = [nodeDictionary objectForKey:DS_hardwareAddress];		if (str) ha16ForString(str, &ha16, &hlen);	}	return &ha16;}- (int)hlen { return hlen; }// ---------------------------------------------------------------------------------//	¥ clientID// ---------------------------------------------------------------------------------- (NSString *)clientID {	NSString* returnValue = clientID;	if (!returnValue) {		returnValue = [nodeDictionary objectForKey:DS_clientID];		clientID = returnValue;	}	return returnValue;}- (void)setClientID:(NSString *)value {    if (value) [nodeDictionary setObject:value forKey:DS_clientID];    else [nodeDictionary removeObjectForKey:DS_clientID];	// clear cached string value	clientID = nil;}- (NSNumber *)action { return [nodeDictionary objectForKey:DS_action]; }- (void)setAction:(NSNumber *)value {    if (value) [nodeDictionary setObject:value forKey:DS_action];    else [nodeDictionary removeObjectForKey:DS_action];}@end