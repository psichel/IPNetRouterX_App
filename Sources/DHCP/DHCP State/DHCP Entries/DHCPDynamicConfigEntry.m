////  DHCPDynamicConfigEntry.m//  IPNetRouterX////  Created by Peter Sichel on Thu May 01 2003.//  Copyright (c) 2003-04 Sustainable Softworks, Inc. All rights reserved.//#import "DHCPDynamicConfigEntry.h"#import "IPSupport.h"// =================================================================================//	¥ DHCPDynamicConfigEntry// =================================================================================@implementation DHCPDynamicConfigEntry// ---------------------------------------------------------------------------------//	¥ init// ---------------------------------------------------------------------------------- (id)init{    if (self = [super init]) {        // initialize our instance variables		networkAddress = 0;		networkMask = 0;		startingAddressInt = 0;		endingAddressInt = 0;		// table display		networkInterface = nil;		startingAddress = nil;		endingAddress = nil;		comment = nil;    }    return self;}// ---------------------------------------------------------------------------------//	¥ dealloc// ---------------------------------------------------------------------------------- (void) dealloc {    [networkInterface release];	[startingAddress release];	[endingAddress release];	[comment release];	[super dealloc];}// Access node dictionary// ---------------------------------------------------------------------------------//	¥ nodeDictionary// ---------------------------------------------------------------------------------- (NSMutableDictionary *)nodeDictionary{	NSMutableDictionary* nd = [NSMutableDictionary dictionaryWithCapacity:5];	if (networkInterface) [nd setObject:networkInterface forKey:DS_networkInterface];	if (startingAddress) [nd setObject:startingAddress forKey:DS_startingAddress];	if (endingAddress) [nd setObject:endingAddress forKey:DS_endingAddress];	if (comment) [nd setObject:comment forKey:DS_comment];	return nd;}// ---------------------------------------------------------------------------------//	¥ setNodeDictionary// ---------------------------------------------------------------------------------- (void)setNodeDictionary:(NSDictionary *)value{	[self setNetworkInterface:[value objectForKey:DS_networkInterface]];	[self setStartingAddress:[value objectForKey:DS_startingAddress]];	[self setEndingAddress:[value objectForKey:DS_endingAddress]];	[self setComment:[value objectForKey:DS_comment]];}+ (DHCPDynamicConfigEntry *)entryFromDictionary:(NSDictionary *)entryDictionary {	DHCPDynamicConfigEntry* entry;	entry = [[[DHCPDynamicConfigEntry alloc] init] autorelease];	[entry setNodeDictionary:[NSMutableDictionary dictionaryWithDictionary:entryDictionary]];	return entry;}#pragma mark -- sort by key --// ---------------------------------------------------------------------------------//	¥ key// ---------------------------------------------------------------------------------- (id)key { return startingAddress; }// ---------------------------------------------------------------------------------//	¥ keyInt// ---------------------------------------------------------------------------------- (u_int32_t)keyInt { return startingAddressInt; }// ---------------------------------------------------------------------------------//	¥ compareKey// ---------------------------------------------------------------------------------- (NSComparisonResult)compareKey:(id)key{	u_int32_t ta = startingAddressInt;	u_int32_t tb = ipForString(key);		if (ta > tb) return NSOrderedDescending;	else if (ta < tb) return NSOrderedAscending;	return NSOrderedSame;}// ---------------------------------------------------------------------------------//	¥ compareKeyInt// ---------------------------------------------------------------------------------- (NSComparisonResult)compareKeyInt:(u_int32_t)key{	//u_int32_t ta = startingAddressInt	//u_int32_t tb = key;		if (startingAddressInt > key) return NSOrderedDescending;	else if (startingAddressInt < key) return NSOrderedAscending;	return NSOrderedSame;}#pragma mark --- Accessors ---// network address- (u_int32_t)networkAddress { return networkAddress; }- (void)setNetworkAddress:(u_int32_t)value{	networkAddress = value;	[networkInterface release];	networkInterface = stringForNetNumber(networkAddress,networkMask);	[networkInterface retain];}// network mask- (u_int32_t)networkMask { return networkMask; }- (void)setNetworkMask:(u_int32_t)value{	networkMask = value;	[networkInterface release];	networkInterface = stringForNetNumber(networkAddress,networkMask);	[networkInterface retain];}// starting address- (u_int32_t)startingAddressInt { return startingAddressInt; }- (void)setStartingAddressInt:(u_int32_t)value{	startingAddressInt = value;	[startingAddress release];	startingAddress = stringForIP(startingAddressInt);	[startingAddress retain];}// ending address- (u_int32_t)endingAddressInt { return endingAddressInt; }- (void)setEndingAddressInt:(u_int32_t)value{	endingAddressInt = value;	[endingAddress release];	endingAddress = stringForIP(endingAddressInt);	[endingAddress retain];}#pragma mark --- Accessors Table Display ---// network interface- (NSString *)networkInterface { return networkInterface; }- (void)setNetworkInterface:(NSString *)value {    [value retain];	[networkInterface release];	networkInterface = value;	netNumberForString(value, &networkAddress, &networkMask);}// starting address- (NSString *)startingAddress { return startingAddress; }- (void)setStartingAddress:(NSString *)value {    [value retain];	[startingAddress release];	startingAddress = value;	startingAddressInt = ipForString(value);}// ending address- (NSString *)endingAddress { return endingAddress; }- (void)setEndingAddress:(NSString *)value {	[value retain];	[endingAddress release];	endingAddress = value;	endingAddressInt = ipForString(value);}// comment- (NSString *)comment { return comment; }- (void)setComment:(NSString *)value {    [value retain];	[comment release];	comment = value;}#pragma mark --- CODING_AND_COPYING ---// <NSCoding>- (void)encodeWithCoder:(NSCoder *)coder{	[coder encodeObject:networkInterface];	[coder encodeObject:startingAddress];	[coder encodeObject:endingAddress];	[coder encodeObject:comment];    return;}- (id)initWithCoder:(NSCoder *)coder{    networkInterface = [[coder decodeObject] retain];	startingAddress = [[coder decodeObject] retain];	endingAddress = [[coder decodeObject] retain];	comment = [[coder decodeObject] retain];		[self setNetworkInterface:networkInterface];	[self setStartingAddress:startingAddress];	[self setEndingAddress:endingAddress];    return self;}// tell the PortCoder not to use a proxy- (id)replacementObjectForPortCoder:(NSPortCoder *)encoder {    return self;}// <NSCopying>- (id)copyWithZone:(NSZone *)zone {    DHCPDynamicConfigEntry *copy;	copy = [[[self class] allocWithZone:zone] init];	[copy setNetworkInterface:networkInterface];	[copy setStartingAddress:startingAddress];	[copy setEndingAddress:endingAddress];	[copy setComment:comment];    return copy;}@end